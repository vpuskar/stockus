import pandas as pd
from pandas_datareader import wb
#from pandas_datareader import data
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from functools import reduce

desired_width=320
pd.set_option('display.width', desired_width)
pd.set_option('display.max_columns',10)

#import market cap data, set year as index and division with 1M
market_cap=pd.read_csv("C:/your_filepath/market_cap_series.csv")
market_cap=market_cap.set_index('Year')
market_cap=market_cap.div(1000000)

#inspect market cap data
#print(market_cap.head())

#retireve data from yfinance
aapl = yf.download('AAPL', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
msft =yf.download('MSFT', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
tsla =yf.download('TSLA', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
xom =yf.download('XOM', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
jnj =yf.download('JNJ', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
jpm =yf.download('JPM', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
amzn =yf.download('AMZN', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
fb =yf.download('FB', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
t = yf.download('T', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
goog = yf.download('GOOG', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
sp500 = yf.download('^GSPC', start='2014-01-01', end='2021-12-31', auto_adjust=True, progress=False)
gdp = wb.download(indicator='NY.GDP.MKTP.CD', country='US', start=2013, end=2021)


#frame data to work with clean df
aapl.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
aapl.rename(columns = {'Close':'AAPL'}, inplace=True)
msft.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
msft.rename(columns = {'Close':'MSFT'}, inplace=True)
tsla.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
tsla.rename(columns = {'Close':'TSLA'}, inplace=True)
xom.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
xom.rename(columns = {'Close':'XOM'}, inplace=True)
jnj.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
jnj.rename(columns = {'Close':'JNJ'}, inplace=True)
jpm.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
jpm.rename(columns = {'Close':'JPM'}, inplace=True)
amzn.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
amzn.rename(columns = {'Close':'AMZN'}, inplace=True)
t.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
t.rename(columns = {'Close':'T'}, inplace=True)
goog.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
goog.rename(columns = {'Close':'GOOG'}, inplace=True)
fb.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
fb.rename(columns = {'Close':'FB'}, inplace=True)
sp500.drop(['Open','High','Low','Volume'], axis=1, inplace=True)
sp500.rename(columns = {'Close':'sp500'}, inplace=True)

#merge all stock data in one df
dataframes = [aapl, msft, tsla, xom, jnj, jpm, amzn, fb, t, goog, sp500]

stocks = reduce(lambda df_left, df_right: pd.merge(df_left, df_right, left_index=True, right_index=True, how='outer'), dataframes)

#inspect stocks
#print(stocks.head())

#plot stock prices series
stocks.plot(subplots=True, title='Stocks price')
plt.show()

#normalize stock prices to be comparable

first_price=stocks.iloc[0]
normalized=stocks.div(first_price).mul(100)

normalized.plot(title='Stocks_normalized')
plt.show()


#compare stock returns against benchmark sp500
tickers=['AAPL', 'MSFT', 'TSLA', 'XOM', 'JNJ', 'JPM', 'AMZN', 'FB', 'T', 'GOOG', 'sp500'] 
diff_benchmark = normalized[tickers].div(normalized['sp500'], axis=0)

#inspect diff_benchmark
#print(diff_benchmark.head())

diff_benchmark.plot(title='sp500 benchmark comparison')
plt.show()

#resample df to annual level and show returns correlations
stocks1=stocks.resample('A').last()
stocks_return=stocks1.pct_change()
stocks_corr=stocks_return.corr()


#mean reversion
#given that investors may overeact to the stock related news after large jumps or drops price tend to revert to the previoous levels
#in fact a popular trading strategy is based on mean reversion
#https://www.investopedia.com/terms/m/meanreversion.asp
#folliwing we'll test weekly and annual data autocorrelation, negative autocorr means mean reverting, positive autocorr indicates trend

stocks_weekly=stocks.resample('W').last()
returns_weekly = stocks_weekly.pct_change()

#function to calculate autocorrelation

def stock_acorr (var):
    return var.squeeze().autocorr()

AAPL_acorr=stock_acorr(returns_weekly['AAPL'])
MSFT_acorr=stock_acorr(returns_weekly['MSFT'])
TSLA_acorr=stock_acorr(returns_weekly['TSLA'])
XOM_acorr=stock_acorr(returns_weekly['XOM'])
JNJ_acorr=stock_acorr(returns_weekly['JNJ'])
JPM_acorr=stock_acorr(returns_weekly['JPM'])
AMZN_acorr=stock_acorr(returns_weekly['AMZN'])
FB_acorr=stock_acorr(returns_weekly['FB'])
T_acorr=stock_acorr(returns_weekly['T'])
GOOG_acorr=stock_acorr(returns_weekly['GOOG'])
sp500_acorr=stock_acorr(returns_weekly['sp500'])

AAPL_acorr_annual=stock_acorr(returns_annual['AAPL'])
MSFT_acorr_annual=stock_acorr(returns_annual['MSFT'])
TSLA_acorr_annual=stock_acorr(returns_annual['TSLA'])
XOM_acorr_annual=stock_acorr(returns_annual['XOM'])
JNJ_acorr_annual=stock_acorr(returns_annual['JNJ'])
JPM_acorr_annual=stock_acorr(returns_annual['JPM'])
AMZN_acorr_annual=stock_acorr(returns_annual['AMZN'])
FB_acorr_annual=stock_acorr(returns_annual['FB'])
T_acorr_annual=stock_acorr(returns_annual['T'])
GOOG_acorr_annual=stock_acorr(returns_annual['GOOG'])
sp500_acorr_annual=stock_acorr(returns_annual['sp500'])


#we can notice obvious deviation between weekly and annual data as expected

print(AAPL_acorr,MSFT_acorr, TSLA_acorr,XOM_acorr, JNJ_acorr,JPM_acorr,AMZN_acorr,FB_acorr,T_acorr,GOOG_acorr,sp500_acorr)

print(AAPL_acorr_annual,MSFT_acorr_annual, TSLA_acorr_annual,XOM_acorr_annual, JNJ_acorr_annual,JPM_acorr_annual,AMZN_acorr_annual,FB_acorr_annual,T_acorr_annual,GOOG_acorr_annual,sp500_acorr_annual)




#inspect diff_benchmark
#print(stocks_corr.head())

#compute total return from first and the last price from df 
tot_return = stocks.iloc[-1].div(stocks.iloc[0]).sub(1).mul(100)
df = tot_return.to_frame().reset_index()
df = df.rename(columns= {0: 'Value'})
df.rename(columns = {'index':'ticker'}, inplace=True)

#visualise total return
sns.barplot(x="Value", y="ticker", data=df,
            label="Total", color="b").set_title("Stock Price Return")
plt.show()

#visualise correlation
sns.heatmap(stocks_corr, annot=True).set_title("Stocks_correlation")
plt.legend([],[], frameon=False)
plt.show()

#market cap variables
mcap_start=market_cap.iloc[-1]
mcap_end=market_cap.iloc[0]

#visualize market cap performance per stock
mcap=pd.concat([mcap_start,mcap_end], axis=1)
mcap.plot(kind='barh', title='markect cap')
plt.show()

#market cap index performance
mcap_index=market_cap.sum(axis=1)
mcap_index.plot(title='mcap_index')
plt.show()

#market cap index total return
mcap_index_return = ((mcap_index.iloc[0]/mcap_index.iloc[-1])-1)*100


#contribion to the index
total_market_cap = mcap_end.sum()
weights = mcap_end.div(total_market_cap)
weights.mul(mcap_index_return).sort_values().plot(kind='barh', title='contribion to the index')
plt.show()

#print(weights.sort_values())


